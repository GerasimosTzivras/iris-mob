{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nimport { tagMessage } from \"../../utils\";\nvar warningMessage = tagMessage('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.useSharedValue) !== undefined;\nvar setGestureState = Reanimated === null || Reanimated === void 0 ? void 0 : Reanimated.setGestureState;\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 463937378312;\n          _f.__location = \"C:\\\\repositories\\\\iris-mob\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (14:13)\";\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 5304131972715;\n          _f.__location = \"C:\\\\repositories\\\\iris-mob\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (23:16)\";\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 180936263236;\n          _f.__location = \"C:\\\\repositories\\\\iris-mob\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (32:12)\";\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (REANIMATED_AVAILABLE) {\n              setGestureState(handlerTag, State.END);\n            } else {\n              console.warn(warningMessage);\n            }\n          };\n          _f._closure = {\n            REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n            setGestureState: setGestureState,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            },\n            warningMessage: warningMessage\n          };\n          _f.asString = \"function _f(){const{REANIMATED_AVAILABLE,setGestureState,handlerTag,State,warningMessage}=jsThis._closure;{if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}}\";\n          _f.__workletHash = 14407529741256;\n          _f.__location = \"C:\\\\repositories\\\\iris-mob\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (41:11)\";\n          return _f;\n        }()\n      };\n    };\n    _f._closure = {\n      REANIMATED_AVAILABLE: REANIMATED_AVAILABLE,\n      setGestureState: setGestureState,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      },\n      warningMessage: warningMessage\n    };\n    _f.asString = \"function create(handlerTag){const{REANIMATED_AVAILABLE,setGestureState,State,warningMessage}=jsThis._closure;{return{begin:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}}\";\n    _f.__workletHash = 3925022521265;\n    _f.__location = \"C:\\\\repositories\\\\iris-mob\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n    return _f;\n  }()\n};","map":{"version":3,"names":["Reanimated","State","tagMessage","warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","GestureStateManager","create","_f","handlerTag","begin","BEGAN","console","warn","_closure","activate","ACTIVE","fail","FAILED","end","END","asString","__workletHash","__location"],"sources":["C:\\repositories\\iris-mob\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}